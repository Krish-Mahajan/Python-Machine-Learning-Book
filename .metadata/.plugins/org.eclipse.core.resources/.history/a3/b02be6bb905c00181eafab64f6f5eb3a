'''
Created on May 21, 2018

@author: krish.mahajan
'''

from sklearn.base import BaseEstimator 
from sklearn.base import ClassifierMixin 
from sklearn.preprocessing import LabelEncoder 
from sklearn.externals import six 
from sklearn.base import clone 
from sklearn.pipeline import _name_estimators 
import numpy as np 
import operator 


class MajorityVoteClassifier(BaseEstimator,ClassifierMixin):
    
    '''
    A majority vote ensemble classifier 
    
    Paramters
    ----------- 
    
    Classifiers : array-like , shape = [n_classifers]
    Different classifier for the ensemble 
    
    vote : str, {'classlabel', 'probability'}
     Default : 'classlabel' 
    if 'classlabel' the prediction is based on 
    the argmax of class labels. Else if 'probability' ,the argmax of the sum of 
    probabilities is used to predict the class label
    (recommended for calibrated classifiers) 
    
    Weights : array-like , shape = [n_classifiers] 
     Optional , default : None 
     If a list of 'int' or 'float' values are provided , the classifiers are weighted by importance ; 
     uses uniform wieghts if 'weights=None'
    '''


    def __init__(self, classifiers,vote='classlabel',weights=None): 
        self.classifiers = classifiers 
        self.names_classifiers = {key: value for key,value in _name_estimators(classifiers)} 
        self.vote =vote 
        self.weights = weights 
        '''
        Constructor
        '''
        